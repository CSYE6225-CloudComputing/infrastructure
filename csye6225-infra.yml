Description: "This template shows how to create a VPC, Internet Gateway, to attach the Internet Gateway to VPC, to create subnets, to create a public Route Table and create a route in route table."

Parameters:
  # VpcName:
  #   Description: VPC Name
  #   Type: String

  KeyName:
    Description: "Key Name for Instance"
    Type: String

  AmiID:
    Description: "AMI ID for Instance"
    Type: String

  VpcCidrBlock:
    Description: "CIDR Block for VPC"
    Type: String
    Default: "10.0.0.0/16"

  VpcSubnetCidrBlocks: 
    Description: "List of CIDR blocks"
    Type: CommaDelimitedList
    Default: "10.0.10.0/24, 10.0.11.0/24, 10.0.12.0/24, 10.0.13.0/24, 10.0.14.0/24, 10.0.15.0/24"

  VpcSubnetAvailabilityZones: 
    Description: "List of Availability Zones"
    Type: CommaDelimitedList
    Default: "us-east-1a, us-east-1b, us-east-1c"

  PublicRouteDestinationCidrBlock:
    Description: "CIDR Block for Public Route"
    Type: String
    Default: "0.0.0.0/0"

  PublicSubnetNames:
    Description: "Name Tags for Subnets"
    Type: CommaDelimitedList
    Default: "PublicSubnet1, PublicSubnet2, PublicSubnet3"

  PrivateSubnetNames:
    Description: "Name Tags for Subnets"
    Type: CommaDelimitedList
    Default: "PrivateSubnet1, PrivateSubnet2, PrivateSubnet3"

  PublicRouteTableName:
    Description: "Name Tag for Public Route Table"
    Type: String
    Default: "PublicRouteTable"

  PrivateRouteTableName:
    Description: "Name Tag for Private Route Table"
    Type: String
    Default: "PrivateRouteTable"

  InternetGatewayName:
    Description: "Name Tag for Internet Gateway"
    Type: String
    Default: "InternetGateway"

  AppSecurityGroup:
    Description: "Name Tag for Application Security Group"
    Type: String
    Default: "application"

  DBSecurityGroupName:
    Description: "Name Tag for DB Security Group"
    Type: String
    Default: "database"

  LBSecurityGroup:
    Description: "Name Tag for LB Security Group"
    Type: String
    Default: "load balancer"

  EC2InstanceName:
    Description: "Instance Name"
    Type: String
    Default: "CSYE6225-CloudApplication"

  InstanceType:
    Description: EC2 instance Type
    Type: String
    Default: t2.micro

  S3BucketName:
    Description: "S3 Bucket Name"
    Type: String
    Default: demo

  Ipv4Cidr:
    Description: "AMI ID for Instance"
    Type: String
    Default: "0.0.0.0/0"

  ProfileName:
    Default: demo
    Type: String

  myLaunchTemplateVersionNumber:
    Type: String
    Default: "1.0"

  DNSName:
    Type: String
    Default: "demo.prasannanimbalkar.me."



Resources:
  # Create a VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags: 
      - Key: Name
        Value: !Ref AWS::StackName

  # Create an Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref InternetGatewayName

  # Attach the Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  # SUBNETS
  # Public Subnet's
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Select [0, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Select [0, !Ref PublicSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Select [1, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Select [1, !Ref PublicSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Select [2, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 2
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Select [2, !Ref PublicSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName

  # Private Subnet's
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Select [3, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Select [0, !Ref PrivateSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Select [4, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Select [1, !Ref PrivateSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Select [5, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 2
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Select [2, !Ref PrivateSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName

  # Create a Public route table for the VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref PublicRouteTableName
      - Key: VPC Name
        Value: !Ref AWS::StackName

  # Create a Private route table for the VPC
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref PrivateRouteTableName
      - Key: VPC Name
        Value: !Ref AWS::StackName

  #
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: !Ref PublicRouteDestinationCidrBlock
      GatewayId:
        Ref: InternetGateway

  # Associate Route Table with subnet Public
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable

  # Associate Route Table with subnet Private
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateRouteTable

  # Creating App Security Group
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Application Security Group
        GroupName: application
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        - IpProtocol: tcp
          Description: SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 
            Ref: Ipv4Cidr
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp:
            Ref: Ipv4Cidr
        Tags:
        - Key: Name
          Value: !Ref AppSecurityGroup

  # Creating Load Balancer Security Group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Load Balancer security group
        GroupName: load balancer
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Ref: Ipv4Cidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Ref: Ipv4Cidr
        Tags:
        - Key: Name
          Value: !Ref LBSecurityGroup

  # Database security group
  DBSecurityGroup:
    DependsOn:
      - PrivateSubnet1
      - PrivateSubnet2
      - PrivateSubnet3
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: database
        GroupName: database
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId 
        Tags:
        - Key: Name
          Value: !Ref DBSecurityGroupName

 # ----------------------------------------------------------------

  
  


  

  


  #S3 Bucket creation
  S3bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "."
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - Ref: "ProfileName"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: Rule for S3 bucket
            Prefix: S3 Documents
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA 
  
  #RDS
  #RDS parameter group
  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: MySql DB
      Family: mysql8.0
      Tags:
        - Key: Name
          Value: mysqlRDSparameter
  
  #RDS subnet
  RdsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for MySQL database
      SubnetIds:
        - Ref: myPrivateSubnet1
        - Ref: myPrivateSubnet2
        - Ref: myPrivateSubnet3

  #RDS MySQL instance
  MySqlDbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: csye6225
      MasterUsername: csye6225
      MasterUserPassword: password
      Engine: mysql
      EngineVersion: 8.0.28
      DBInstanceClass: db.t3.micro
      DBSubnetGroupName: !Ref RdsDBSubnetGroup
      StorageType: gp2
      PubliclyAccessible: False
      AllocatedStorage: "20"
      VPCSecurityGroups:
        # - !GetAtt "DatabaseSecurityGroup.GroupId"
        - !Ref DatabaseSecurityGroup
      DBInstanceIdentifier: "csye6225"
      MultiAZ: False

  RootRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EC2-CSYE6225"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  DemoInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: demo-ec2-instance-profile
      Path: /
      Roles:
        - !Ref RootRole

  RolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:Put*"
              - "s3:Get*"
              - "s3:Delete*"
            Resource:
              - !Sub arn:aws:s3:::${S3bucket}
              - !Sub arn:aws:s3:::${S3bucket}/*
      Roles:
        - Ref: RootRole

 #Creating AMI EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref DemoInstanceProfile
      ImageId: !Ref AMI
      KeyName: !Ref KeyName
      InstanceType: "t2.micro"
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeleteOnTermination: "true"
          SubnetId: !Ref myPublicSubnet1
          DeviceIndex: "0"
          GroupSet: 
            - !Ref myApplicationSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo export RDS="${MySqlDbInstance.Endpoint.Address}" >> /etc/profile
          echo export DB_HOST="${MySqlDbInstance.Endpoint.Address}" >> /etc/profile
          echo export DB_USER="csye6225" >> /etc/profile
          echo export SQL_ROOT="csye6225" >> /etc/profile
          echo export SQL_PASS="${DBPassword}" >> /etc/profile
          echo export DB_PASSWORD="${DBPassword}" >> /etc/profile
          echo export DB_NAME="${DBName}" >> /etc/profile
          echo export bucket="${S3bucket}" >> /etc/profile 
          echo export AWS_BUCKET_NAME="${S3bucket}" >> /etc/profile
          echo export AWS_BUCKET_REGION="us-east-1" >> /etc/profile
          echo export AWS_REGION="us-east-1" >> /etc/profile
          echo export AWS_ACCESS_KEY_ID="${AWSAccessKeyID}"  >> /etc/profile
          echo export AWS_SECRET_ACCESS_KEY="${AWSSecretAccessKey}" >> /etc/profile
          echo export DB="csye6225" >> /etc/profile
          echo export region="us-east-1" >> /etc/profile
          sleep 20
          source /etc/profile
          sudo -i
          sudo pm2 restart all --update-env --watch --wait-ready --listen-timeout 2000
          cd /home/ubuntu/node-app/
          rm -rf node_modules
          sudo npm i
          sleep 20
          pm2 restart all --update-env --watch --wait-ready --listen-timeout 2000
          sleep 20

          
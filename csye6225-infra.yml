Description: "This template shows how to create a VPC, Internet Gateway, to attach the Internet Gateway to VPC, to create subnets, to create a public Route Table and create a route in route table."

Parameters:
  # VpcName:
  #   Description: VPC Name
  #   Type: String

  KeyName:
    Description: "Key Name for Instance"
    Type: String

  AmiID:
    Description: "AMI ID for Instance"
    Type: String

  VpcCidrBlock:
    Description: "CIDR Block for VPC"
    Type: String
    Default: "10.0.0.0/16"

  VpcSubnetCidrBlocks: 
    Description: "List of CIDR blocks"
    Type: CommaDelimitedList
    Default: "10.0.1.0/24, 10.0.2.0/24, 10.0.3.0/24, 10.0.4.0/24, 10.0.5.0/24, 10.0.6.0/24"

  VpcSubnetAvailabilityZones: 
    Description: "List of Availability Zones"
    Type: CommaDelimitedList
    Default: "us-east-1a, us-east-1b, us-east-1c"

  PublicRouteDestinationCidrBlock:
    Description: "CIDR Block for Public Route"
    Type: String
    Default: "0.0.0.0/0"

  PublicSubnetNames:
    Description: "Name Tags for Subnets"
    Type: CommaDelimitedList
    Default: "PublicSubnet1, PublicSubnet2, PublicSubnet3"

  PrivateSubnetNames:
    Description: "Name Tags for Subnets"
    Type: CommaDelimitedList
    Default: "PrivateSubnet1, PrivateSubnet2, PrivateSubnet3"

  PublicRouteTableName:
    Description: "Name Tag for Public Route Table"
    Type: String
    Default: "PublicRouteTable"

  PrivateRouteTableName:
    Description: "Name Tag for Private Route Table"
    Type: String
    Default: "PrivateRouteTable"

  InternetGatewayName:
    Description: "Name Tag for Internet Gateway"
    Type: String
    Default: "InternetGateway"

  AppSecurityGroup:
    Description: "Name Tag for Application Security Group"
    Type: String
    Default: "application"

  DBSecurityGroupName:
    Description: "Name Tag for DB Security Group"
    Type: String
    Default: "database"

  LBSecurityGroup:
    Description: "Name Tag for LB Security Group"
    Type: String
    Default: "load balancer"

  EC2InstanceName:
    Description: "Instance Name"
    Type: String
    Default: "CSYE6225-CloudApplication"

  InstanceType:
    Description: EC2 instance Type
    Type: String
    Default: t2.micro

  S3BucketName:
    Description: "S3 Bucket Name"
    Type: String
    Default: demo

  Ipv4Cidr:
    Description: "AMI ID for Instance"
    Type: String
    Default: "0.0.0.0/0"

  ProfileName:
    Default: demo
    Type: String

  myLaunchTemplateVersionNumber:
    Type: String
    Default: "1.0"

  DNSName:
    Type: String
    Default: "prod.prasannanimbalkar.me."
  
  emailaddress:
    Description: email address
    Type: String
    Default: "nimbalkar.p@northeastern.edu"




Resources:
   # Create a VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags: 
      - Key: Name
        Value: !Ref AWS::StackName

   # Create an Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref InternetGatewayName

  # Attach the Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # SUBNETS
  # Public Subnet's
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Select [0, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Select [0, !Ref PublicSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Select [1, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Select [1, !Ref PublicSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Select [2, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 2
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: !Select [2, !Ref PublicSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName

  # Private Subnet's
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Select [3, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Select [0, !Ref PrivateSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Select [4, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Select [1, !Ref PrivateSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Select [5, !Ref VpcSubnetCidrBlocks]
      AvailabilityZone: !Select 
        - 2
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: !Select [2, !Ref PrivateSubnetNames]
      - Key: VPC Name
        Value: !Ref AWS::StackName

  # Create a Public route table for the VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref PublicRouteTableName
      - Key: VPC Name
        Value: !Ref AWS::StackName

  # Create a Private route table for the VPC
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref PrivateRouteTableName
      - Key: VPC Name
        Value: !Ref AWS::StackName

  #
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: !Ref PublicRouteDestinationCidrBlock
      GatewayId:
        Ref: InternetGateway

  # Associate Route Table with subnet Public
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable

  # Associate Route Table with subnet Private
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateRouteTable


  
  # Creating App Security Group
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Application Security Group
        GroupName: application
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 
            Ref: Ipv4Cidr
        - IpProtocol: tcp
          Description: SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 
            Ref: Ipv4Cidr
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp:
            Ref: Ipv4Cidr
        Tags:
        - Key: Name
          Value: !Ref AppSecurityGroup


  #Database security group
  DBSecurityGroup:
    DependsOn:
      - PrivateSubnet1
      - PrivateSubnet2
      - PrivateSubnet3
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: database
        GroupName: database
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt ApplicationSecurityGroup.GroupId 
        Tags:
        - Key: Name
          Value: !Ref DBSecurityGroupName
  



  #S3 Bucket creation
  S3Bucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      BucketName: !Join
        - "."
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - Ref: "ProfileName"
          - "prasannanimbalkar.me"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: Rule for S3 bucket
            Prefix: S3 Documents
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA 
      Tags:
        - Key: Name
          Value: !Ref S3BucketName
  
  #RDS
  #RDS parameter group
  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: MySQL8
      Family: mysql8.0
  
  #RDS subnet
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Private Subnet Group for MySql Database
      DBSubnetGroupName: RDS Subnet Group
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  #RDS MySQL instance
  RDS:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      DBName: csye6225
      Port: 3306
      MasterUsername: csye6225
      MasterUserPassword: password
      Engine: mysql
      EngineVersion: 8.0.28
      DBInstanceClass: db.t3.micro
      StorageType: gp2
      PubliclyAccessible: False
      AllocatedStorage: 20
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBInstanceIdentifier: csye6225
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      DBParameterGroupName:
        Ref: RDSDBParameterGroup
      MultiAZ: False

  WebAppS3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
        PolicyName: WebAppS3
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource: 
              -  !Sub arn:aws:s3:::${S3Bucket}
              -  !Sub arn:aws:s3:::${S3Bucket}/*
        Roles: 
          - !Ref IAMRole

  IAMRole:
    Type: 'AWS::IAM::Role' 
    Properties:
      RoleName: EC2-CSYE6225
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /

  IAMInstanceProfile: 
    Type: 'AWS::IAM::InstanceProfile'
    Properties: 
      Path: /
      Roles: 
        - Ref: IAMRole

 
  #Creating AMI EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref IAMInstanceProfile
      ImageId: !Ref AmiID
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      BlockDeviceMappings: 
      - DeviceName: "/dev/sdm"
        Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: "20"
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeleteOnTermination: "true"
          SubnetId: !Ref PublicSubnet1
          DeviceIndex: "0"
          GroupSet: 
            - !Ref ApplicationSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo export DB_HOST="${RDS.Endpoint.Address}" >> /etc/environment
          echo export DB_USER="csye6225" >> /etc/environment
          echo export DB_PASSWORD="password" >> /etc/environment
          echo export DB_NAME="csye6225" >> /etc/environment
          echo export AWS_BUCKET_NAME="${S3Bucket}" >> /etc/environment
          echo export AWS_REGION="us-east-1" >> /etc/environment
          echo export DB="csye6225" >> /etc/environment
          sleep 20
          source /etc/environment
          sudo -i
          sudo pm2 restart all --update-env --watch --wait-ready --listen-timeout 2000
          cd /home/ubuntu/node-app/
          rm -rf node_modules
          sudo npm i
          sleep 10
          pm2 restart all --update-env --watch --wait-ready --listen-timeout 2000
          sleep 10

  DNSHost:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref DNSName
      Name: !Ref DNSName
      Type: A
      TTL: 900
      ResourceRecords:
      - !GetAtt EC2Instance.PublicIp

  CloudWatchAgentPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "EC2CloudWatchPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'cloudwatch:PutMetricData'
              - 'ec2:DescribeTags'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeLogGroups'
              - 'logs:CreateLogStream'
              - 'logs:CreateLogGroup'
            Resource: "*"
          - Effect: Allow
            Action:
              - 'ssm:GetParameter'
              - 'ssm:PutParameter'
            Resource: "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
      Roles:
        - Ref: IAMRole

  SNSservice:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: verify_email
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: lambda
      TopicName: verify_email

  SNStopicpolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
        - Sid: __default_statement_ID
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:Publish
          - SNS:DeleteTopic
          - SNS:ListSubscriptionsByTopic
          - SNS:GetTopicAttributes
          - SNS:Receive
          - SNS:AddPermission
          - SNS:Subscribe
          Resource:
            Ref: SNSservice
          Condition:
            StringEquals:
              AWS:SourceOwner: !Ref AWS::AccountId
        - Sid: __console_pub_0
          Effect: Allow
          Principal:
            AWS: "*"
          Action: SNS:Publish
          Resource:
            Ref: SNSservice
        - Sid: __console_sub_0
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:Subscribe
          - SNS:Receive
          Resource:
            Ref: SNSservice
      Topics:
      - Ref: SNSservice

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: SNSservice

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: emailVerify
      Role:
        Fn::Join:
        - ''
        - - 'arn:aws:iam::'
          - !Ref AWS::AccountId
          - ":role/"
          - !Ref LambdaRole
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: |
          console.log('In Lambda function');
          exports.handler=function(event,context,callback){
            console.log('Message from SNS');
            var message = event.Records[0].Sns.Message;
            callback(null,"Success");
          };
      Description: Function to store token in dynamodb and send email to SNS

  DynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "Email"
          AttributeType: "S"
        - 
          AttributeName: "TokenName"
          AttributeType: "S"
      KeySchema:
        - 
          AttributeName: "Email"
          KeyType: "HASH"
        - 
          AttributeName: "TokenName"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 5
      TableName: csye-6225
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: true
      Tags:
        - Key: key
          Value: value

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "LambdaFunctionRole"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        
  DynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:List*'
              - 'dynamodb:DescribeReservedCapacity*'
              - 'dynamodb:DescribeLimits'
              - 'dynamodb:DescribeTimeToLive'
            Resource: 
              - '*'
          - Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Get*'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:Delete*'
              - 'dynamodb:CreateTable'
              - 'dynamodb:Update*'
              - 'dynamodb:BatchWrite*'
              - 'dynamodb:DescribeStream'
              - 'dynamodb:BatchGet*'
            Resource:
              - !GetAtt DynamodbTable.Arn
      Roles:
        - !Ref IAMRole


  